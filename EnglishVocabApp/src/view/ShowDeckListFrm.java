/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.io.File;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.Deck;
import model.FlashCard;

/**
 *
 * @author nguye
 */
public class ShowDeckListFrm extends javax.swing.JFrame {

    /**
     * Creates new form ShowDeckListFrm
     */
    
    private DefaultListModel<String> listModel;
    private ArrayList<String> nameList;
    protected ArrayList<Deck> deckList;
    private  DefaultTableModel table;
    private ArrayList<FlashCard> cardList;
    private int count;
    private ArrayList<Integer> dueList;
    LocalDateTime study, due;
    String dueDate;
    private int progress;
    public ShowDeckListFrm() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        table = (DefaultTableModel) tblDeckList.getModel();
        
        listModel = new DefaultListModel<>();
        DeckList.setModel(listModel);
        nameList = new ArrayList<>();
        nameList = readFromeFile(); 
        deckList = new ArrayList<>();
        dueList = new ArrayList<>();
        dueList.add(0);
        dueList.add(30);
        dueList.add(90);
        dueList.add(1);
        dueList.add(2);
        dueList.add(5);
        dueList.add(10);
        dueList.add(14);
        study = null;
        due = null;
        dueDate = "";
       
        for(String b : nameList)
        {
            listModel.addElement(b);
            cardList = ReadCardFile(b+".txt");
            count = ReadDeckCountFile(b);
            progress = ReadProgess(b);
            if(count>0)
            {
                study = readStudyTime(b);
                System.out.println(study); 
                if(count<3)
                {
                    due = study.plus(dueList.get(count),ChronoUnit.MINUTES);
                    writeDueTimeToFile(b);
                    dueDate = formatTime(due);
                }else if(count > 7)
                {
                    if(progress<100) dueDate = "Try to reach 100% of progress";
                    else dueDate = "You've remembered the deck";
                }
                else{
                    due = study.plus(dueList.get(count), ChronoUnit.DAYS);
                    writeDueTimeToFile(b);
                    dueDate = formatTime(due);
                }
                
            }
            Deck d = new Deck(cardList, b);
            table.addRow(new Object[]{
                b, cardList.size(),progress ,dueDate});
            deckList.add(d);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DeckList = new javax.swing.JList<>();
        connect = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDeckList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DeckList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(DeckList);

        connect.setText("Connect to Deck");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblDeckList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Deck Name", "Number of Cards", "Progress", "Due Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDeckList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(connect)
                        .addGap(108, 108, 108)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connect)
                    .addComponent(jButton1))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        if(DeckList.getSelectedIndex()!=-1)
        {
            String selected = DeckList.getSelectedValue();
            writeDeckChosenToFile(selected);
            new DeckFrm().setVisible(true);
            this.dispose();
        }
        else
        {
            int x =tblDeckList.getSelectedRow();
            if(x!=-1)
            {
                String selected = (String) tblDeckList.getValueAt(x, 0);
                writeDeckChosenToFile(selected);
                new DeckFrm().setVisible(true);
                this.dispose();
            }
        }
            
        
    }//GEN-LAST:event_connectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new HomeFrm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowDeckListFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowDeckListFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowDeckListFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowDeckListFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowDeckListFrm().setVisible(true);
            }
        });
    }

    private ArrayList<String> readFromeFile() {
        ArrayList<String> list = new ArrayList<>();
        try(Scanner sc = new Scanner(new File("DeckName.txt"))){
            while(sc.hasNext())
            {
                String b = sc.nextLine();
                list.add(b);
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
        return list;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> DeckList;
    private javax.swing.JButton connect;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDeckList;
    // End of variables declaration//GEN-END:variables

    private void writeDeckChosenToFile(String selected) {
            try(PrintWriter pw = new PrintWriter(new File("DeckNameChosen.txt"))){
            pw.println(selected);
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
    }
    
    private void showTable() {
        int i=0;
        while(i<deckList.size()-1)
        {
            Deck d = deckList.get(i);
            table.addRow(new Object[]{
                d.getDeckName(), d.getCardList().size(), 0
            });
            i++;
        }
        
    }

    private ArrayList<FlashCard> ReadCardFile(String par) {
        ArrayList<FlashCard> list = new ArrayList<>();
        try(Scanner sc = new Scanner(new File(par))){
            while(sc.hasNext())
            {
                FlashCard card = new FlashCard();
                card.setQuestion(sc.nextLine());
                card.setAnswer(sc.nextLine());
                
                list.add(card);
                
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
        return list;
    }
    private int ReadDeckCountFile(String s) {
        int x = 0;
        try(Scanner sc = new Scanner(new File(s+"count.txt")))
        {
            while(sc.hasNext())
            {
                x = sc.nextInt();
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
         
        return x;
                  
    }

    private LocalDateTime readStudyTime(String deckName) {
        String x = "";
        LocalDateTime y = null;
        try(Scanner sc = new Scanner(new File(deckName+"StudyTime.txt")))
        {
            while(sc.hasNext())
            {
                x = sc.nextLine();
                y = LocalDateTime.parse(x);
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
         
        return y;
    }

    private void writeDueTimeToFile(String b) {
        try(PrintWriter pw = new PrintWriter(new File(b+"DueTime.txt"))){
           pw.println(due);
        } catch(Exception e)
       {
           System.out.println("Got an 1exception");
       }
    }
    
    private String formatTime(LocalDateTime now) {
        String pattern = "dd/MM/yyy HH:mm:ss";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
        String formattedDateTime = now.format(formatter);
        return formattedDateTime;
    }

    private int ReadProgess(String b) {
        int x = 0;
        try(Scanner sc = new Scanner(new File(b+"Progress.txt")))
        {
            while(sc.hasNext())
            {
                x = sc.nextInt();
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }    
        return x;
    }
}
