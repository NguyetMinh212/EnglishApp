/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.io.File;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;
import model.FlashCard;

/**
 *
 * @author nguye
 */
public class StudyCardFrm extends javax.swing.JFrame {

    /**
     * Creates new form StudyCardFrm
     */
    private String deckName;
    private ArrayList<FlashCard> cardList;
    private boolean isShowAnswer;
    private Iterator cardIterator;
    private FlashCard currentCard;
    private int count;
    private int remember = 0;
    private int progress = 0;
    public StudyCardFrm() {
        initComponents();
        deckName = "";
        deckName = ReadDeckNameFromFile();
        cardList = new ArrayList<>();
        cardList = ReadCardFromFile();
        Random random = new Random();
        Collections.shuffle(cardList, random);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        //Separator1.setEnabled(false);
        //backtxt.setEnabled(false);
        backtxt.setVisible(false);
        Separator1.setVisible(false);
        cardIterator = cardList.iterator();
        forgetbtn.setEnabled(false);
        forgetbtn.setVisible(false);
        rememberbtn.setEnabled(false);
        rememberbtn.setVisible(false);
        count = ReadDeckCountFile();
        showNextCard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fronttxt = new javax.swing.JTextArea();
        Separator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        backtxt = new javax.swing.JTextArea();
        forgetbtn = new javax.swing.JButton();
        showAnsbtn = new javax.swing.JButton();
        rememberbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fronttxt.setEditable(false);
        fronttxt.setColumns(20);
        fronttxt.setLineWrap(true);
        fronttxt.setRows(5);
        fronttxt.setWrapStyleWord(true);
        jScrollPane1.setViewportView(fronttxt);

        backtxt.setEditable(false);
        backtxt.setColumns(20);
        backtxt.setLineWrap(true);
        backtxt.setRows(5);
        backtxt.setWrapStyleWord(true);
        jScrollPane2.setViewportView(backtxt);

        forgetbtn.setText("I forgot it");
        forgetbtn.setAutoscrolls(true);
        forgetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgetbtnActionPerformed(evt);
            }
        });

        showAnsbtn.setText("Show Answer");
        showAnsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAnsbtnActionPerformed(evt);
            }
        });

        rememberbtn.setText("I remember");
        rememberbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rememberbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(Separator1)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(280, 280, 280)
                                .addComponent(showAnsbtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(165, 165, 165)
                                .addComponent(rememberbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(forgetbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(showAnsbtn)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rememberbtn)
                    .addComponent(forgetbtn))
                .addGap(71, 71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showAnsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAnsbtnActionPerformed
        if(isShowAnswer)
           {
               Separator1.setVisible(true);
               backtxt.setVisible(true);
               backtxt.setText(currentCard.getAnswer());
               showAnsbtn.setText("Next Card");
               showAnsbtn.setEnabled(false);
               rememberbtn.setVisible(true);
               rememberbtn.setEnabled(true);
               forgetbtn.setEnabled(true);
               forgetbtn.setVisible(true);
               isShowAnswer = false;
               
           } else{
               if(cardIterator.hasNext())
               {
                   showNextCard();
               }else{
                   if(showAnsbtn.getText()!="Done")
                   {
                       fronttxt.setText("That was the last card.");
                        Separator1.setVisible(false);
                        backtxt.setVisible(false);
                        //showAnsbtn.setEnabled(false);
                        //forgetbtn.setEnabled(true);
                        showAnsbtn.setText("Done");
                   } else{
                        LocalDateTime now = LocalDateTime.now();
                        String formattedNow = formatTime(now);
                        if(count==0)
                        {
                            count++;
                            writeDeckCountToFile(count);
                            writeStudyTimeToFile(now);
                        } else{
                            LocalDateTime due = readDueTime();
                            int a = due.compareTo(now);
                            if(a<=0)
                            {
                                count++;
                                writeDeckCountToFile(count);
                                writeStudyTimeToFile(now);
                            }
                        }
                        CalculateProgress();
                        WriteProgressToFile(progress);
                        new ShowDeckListFrm().setVisible(true);
                        this.dispose();
                    }
                   
                   
               }
           }
        
    }//GEN-LAST:event_showAnsbtnActionPerformed

    private void forgetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgetbtnActionPerformed
       showAnsbtn.setEnabled(true);
        
        rememberbtn.setVisible(false);
        rememberbtn.setEnabled(false);
        forgetbtn.setEnabled(false);
        forgetbtn.setVisible(false);
    }//GEN-LAST:event_forgetbtnActionPerformed

    private void rememberbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rememberbtnActionPerformed
        showAnsbtn.setEnabled(true);
        remember++;
        rememberbtn.setVisible(false);
        rememberbtn.setEnabled(false);
        forgetbtn.setEnabled(false);
        forgetbtn.setVisible(false);
    }//GEN-LAST:event_rememberbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudyCardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudyCardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudyCardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudyCardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudyCardFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator Separator1;
    private javax.swing.JTextArea backtxt;
    private javax.swing.JButton forgetbtn;
    private javax.swing.JTextArea fronttxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton rememberbtn;
    private javax.swing.JButton showAnsbtn;
    // End of variables declaration//GEN-END:variables

    private String ReadDeckNameFromFile() {
        String b = "";
        try(Scanner sc = new Scanner(new File("DeckName.txt"))){
            while(sc.hasNext())
            {
                 b = sc.nextLine();
                
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
        return b;
    }

    private ArrayList<FlashCard> ReadCardFromFile() {
        ArrayList<FlashCard> list = new ArrayList<>();
        try(Scanner sc = new Scanner(new File(deckName+".txt"))){
            while(sc.hasNext())
            {
                FlashCard card = new FlashCard();
                card.setQuestion(sc.nextLine());
                card.setAnswer(sc.nextLine());
                
                list.add(card);
                
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
        return list;
    }

    private void showNextCard() {
        currentCard = (FlashCard) cardIterator.next();
        fronttxt.setText(currentCard.getQuestion());
        showAnsbtn.setText("Show Answer");
        isShowAnswer = true;
        Separator1.setVisible(false);
        backtxt.setVisible(false);
        rememberbtn.setVisible(false);
        rememberbtn.setEnabled(false);
        forgetbtn.setEnabled(false);
        forgetbtn.setVisible(false);
       
    }
    
    private int ReadDeckCountFile() {
        int x = 0;
        try(Scanner sc = new Scanner(new File(deckName+"count.txt")))
        {
            while(sc.hasNext())
            {
                x = sc.nextInt();
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
         
        return x;
                  
    }

    private void writeDeckCountToFile(int count) {
        try(PrintWriter pw = new PrintWriter(new File(deckName+"count.txt"))){
            pw.println(count);
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
    }

//    private void writeTimeToFile(String formattedDateTime) {
//        try(PrintWriter pw = new PrintWriter(new File(deckName+"Time.txt"))){
//            pw.println(count);
//        } catch(Exception e)
//        {
//            System.out.println("Got an exception");
//        }
//    }
//    

    private void writeStudyTimeToFile(LocalDateTime now) {
        try(PrintWriter pw = new PrintWriter(new File(deckName+"StudyTime.txt"))){
           pw.println(now);
        } catch(Exception e)
       {
           System.out.println("Got an 1exception");
       }
    }

    private String formatTime(LocalDateTime now) {
        String pattern = "dd/MM/yyy HH:mm:ss";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
        String formattedDateTime = now.format(formatter);
        return formattedDateTime;
    }

    private LocalDateTime readDueTime() {
        String x = "";
        LocalDateTime y = null;
        try(Scanner sc = new Scanner(new File(deckName+"DueTime.txt")))
        {
            while(sc.hasNext())
            {
                x = sc.nextLine();
                y = LocalDateTime.parse(x);
            }
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
         
        return y;
    }

    private void CalculateProgress() {
        progress = remember*100/cardList.size();
    }

    private void WriteProgressToFile(int progress1) {
        try(PrintWriter pw = new PrintWriter(new File(deckName+"Progress.txt"))){
            pw.println(progress1);
        } catch(Exception e)
        {
            System.out.println("Got an exception");
        }
    }
}
